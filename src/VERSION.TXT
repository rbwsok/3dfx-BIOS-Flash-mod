9/12/00 - FLASH Version 2.17
Added Daytona support for the Daytona 4000 boards.

* DATA.CPP *
Expanded the ChipSpeedVer and Napalm Build structures to include 
	the Daytona 4000.

* FLASH.H *
Added Daytona support for the Daytona 4000 boards.

========================================================================
9/12/00 - FLASH Version 2.16
Fixed bug with last entry in the structures SpeedVer and Builds wer never
	read.
Fixed bug with Napalm BIOS builds not properly being found when multiple
	subvendor IDs were used for a set of BIOS builds.

Added Daytona UserFlash code to perserve the Strapping Option DWORDS.

Added Napalm support for the Napalm 4400 boards.

Added Daytona support for the Daytona 4200 boards.

* MAIN.CPP *
In ValidateNewROM, fixed bug with size of SpeedVer and Builds structures
	not properly being read.
In ValidateNewRom, expanded the check for the SubVendor ID to also check
	the bus type and BIOS speed.

* FLASH.H *
Added #defines for the offsets to the strapping option data.

Added Napalm support for the Napalm 4400 boards.
Added Daytona support for the Daytona 4200 boards.

* DATA.CPP *
Expanded the ChipSpeedVer and Napalm Build structures to include 
	Napalm 4400.

Removed the Napalm build for the V5P901 Voodoo5 5800.

* ROM.CPP *
In BeginROM, expand the check for Napalm to also include a check for
	Napalm2.

Expanded the WriteROMFromFile routine to also preserve the strapping
	options DWORDS.

========================================================================
8/17/00 - FLASH Version 2.15
Added support for the Napalm2.

* MAIN.CPP *
In ValidateNewRom, expanded the Napalm chip ID check to also include
   Napalm2.

* FLASH.H *
Added "#define ChipIdNapalm2	0x0B" for the Napalm2 chip ID.

Updated NUM_TDFX_CHIPS to 6.

========================================================================
8/4/00 - FLASH Version 2.14
Added support for the Napalm V5-5800 boards.

* FLASH.H *
Changed the number of Napalm board options, NUM_NAPALM_BUILDS, to 16
	and the number of Napalm speed options, NUM_NAPALM_SPEED, to 5.

Updated the ChipSpeedType structure to include Napalm_5800.

* DATA.CPP *
Updated the sChipSpeedVer variable to support for to 10 speed types.

Added the Napalm 5800 to the sNapalmSpeedVer and sNapalmBuilds structures.

========================================================================
3/7/00 - FLASH Version 2.13
Combined the FLASH and USERFLASH code base into one source tree.
To compile FLASH, 
	1. Type "nmake clean"
	2. Type "nmake". Resulting file is FLASH.EXE.
To compile USERFLASH, 
	1. Type "nmake -fuserflsh.mak clean".  
	2. Type "nmake -fuserflsh.mak".  Resulting file is USERFLSH.EXE.
UserFlash coded is conditionally compiled.

Added support for the SST 39VF512 flash part.

Added support for the Velocity and Voodoo3 1000 boards.

* USAGE.TXT UserFlash Usage.txt *
-= NEW FILE =-
UserFlash usage documents

* USERFLSH.MAK *
-= NEW FILE =-
Makefile for creating USERFLSH.EXE

* FLASH.H *
Added #defines for the offsets to the OEMConfig table.

Added #defines for the size and register offsets to the Voodoo3, Napalm,
	and Rampage OemConfig tables.

Added #define for the SST_35VF512 device ID.

Increased the number for V3 boards from 59 to 74.

Updated the ChipSpeedType structure for the Velocity 100 and 200 boards.

Added defines for UserFlash routines and variables.

Changed the constant NUM_REGS into a variable.


* DATA.CPP *
Added the variable sVd3Velocity to check for the "Velocity" string
	in the BIOS.

In the structure ChipSpeedVer, added support for the Velocity 100/200
	and Voodoo3 1000 boards.

In the structure sV3Builds, added the board configurations for the
	Velocity 100/200 and Voodoo3 1000 boards.

Added UserFlash variables byVPDBuffer abd byRegisterOffset.

Changed the "Napalm" string to "VSA 100".

Conditonally compilied two seperate set of copyright and usage messages
for FLASH and USERFLSH.

Added variables and boolean flags for the USERFLASH command line 
	override options.

Modified the USERFLASH structure sOEMCfgREgInfo to default to use the
	V3 OEMConfig strurcture.

* MAIN.CPP *
Added the USERFLASH code to properly generate the correct escape codes
	when printing error messages.

In the main routine, added USERFLASH code to initilize all the command
	line flags to false.   Also parsed the command line parameters and
	set the appropiate flags.

In the main routine, added a check for the SST 39VF512 flash part.

In the main routine, added the USERFLASH code to compare version numbers.
	If the current BIOS version is newer than the BIOS to be flashed, 
	a warning message is printed.  Also added USERFLASH code to not 
	preserve the original OEMConfig register settings and use the
	new settings in the binary file about to be flashed.

In the ValidateNewRom routine, added a check for the Velocity BIOS.
	Also added UserFlash code to skip the check of the SSID and board
	configuration.

* ROM.CPP *
In the routine SaveRom, added UserFlash code to save the VPD structure.

In the routine WriteROMRestore, modified the loop to always assume a 64K 
   BIOS.

In the routine WriteROMFromFile, added UserFlash code to restore settings 
   depending on the command line flag settings.

In the routine ROMVerifyWrite, added support for the SST 35VF512 flash part.

Added the following UserFlash routines:

IsVPDAvailable - Check if the old ROM had a VPD to update

SaveOffOldRegs - Save the configuration table for the 
	register settings of the Old BIOS. To be maintained
	when the new BIOS is flashed

GetNewRegsSettingPtr - Return the WORD pointer for the Register
	settings table within the new BIOS file. 

CopyInOldRegs - Copy the Original Register settings from the
	old BIOS into the new BIOS 

NewFileVPDAvailable - Check the file intended to be flashed to see
	if the VPD structure is there

CheckLaterVersion - Will compare the versions of the ROM and the new file
	to see which is later

========================================================================
2/2/00 - FLASH Version 2.12
Fixed bug with trying to FLASH bios while in a full screen DOS session
and after running Windows.
Fixes PRS#12546

* ROM.CPP *
In BeginRom, save the original state of MiscInit0 and cleared
MiscInit0[30]=0 begin flash the ROM.

In EndRom, restored the original state of MiscInit0.

* MAIN.CPP *
In InitBoard, initilized the variable lpLinMiscInit0 with the
current miscInit0 value.

* DATA.CPP *
Created the variables dwOrgMiscInit0 and lpLimMiscInit0.

* FLASH.H *
Created the externs dwOrgMiscInit0 and lpLinMiscInit0.

========================================================================
1/15/00 - FLASH Version 2.11
Fixed bug with not being able to flash PCI cards on a Camino motherboard.
Camino systems have the PCI bus on bus 2 not bus 0.

* vidin.h *
Change the MAX_PCI_DEVICES to scan 00h to 0Fh buses for 3dfx cards.

========================================================================
1/15/00 - FLASH Version 2.10
Fixed error with not being able to detect Voodoo4 and Voodoo5 cards.
Changed the Napalm PCI device ID from 0x07 to 0x09.
Updated Napalm board configuration tables.

* FLASH.H *
Changed the Napalm device ID from 0x07 to 0x09.

Updated the ChipSpeedType struture for the all the Napalm board types.

Created externs for sVoodoo4 and sVoodoo5 BIOS string names.

Fixed bug in sNapalmBuilds and sRampageBuilds extern defination.

* DATA.CPP *
Created the strings sVoodoo4 and SVoodoo5.

Updated the structures sNapalmSpeedVer and sNapalmBuilds.

Updated the version number to 2.10.

* MAIN.CPP *
In ValidateNewROM, added check for Voodoo4 and Voodoo5.  Also modified
scheme to check for SDRAM and SGRAM Napalm BIOS.  Will now read the
board configuration DWORD instead of searching for the "-SD" or "-SG"
string.


========================================================================
7/22/99 - FLASH Version 2.09
Added support for flashing Napalm and Rampage.
Clean up some of the compiler warning messages in PCIINFO.CPP.

* DATA.CPP *
Created seperate chip strings, ChipSpeedVer tables, and ChipBuildInfo
tables for V3, Napalm, and Rampage.

Added Napalm and Rampage into the Device name table

Made wDeviceId a global variable.

* FLASH.H *
Created #define ChipId for Napalm and Rampage.

Created seperate ChipSpeedVer and ChipBuildInfo
table size defines for V3, Napalm, and Rampage.

Added Napalm and Rampage intot he ChipSpeedtype enumerated table.

Renamed all the "V3_" variables to "CHIP_".

Modified the ChipSpeedVer strucuture to include BusType


* MAIN.CPP *
Modified the SelectBoard routine to use the TdfxDeviceName table
to get the board name.

Modified the ValidateNewRom to handle searching Napalam and Rampage.
The changes were made in a way so that adding support for a new
chip can easily be made.

* PCIINFO.CPP *
Commented out some of the PCIINFO variables to remove the warning 
messages generated by the compilier.

* ROM.CPP *
In BeginROM, added code to program MiscInit[2] to enable ROM Writes
on Rampage only.  Napalam and V3 programs MiscInit[4] to enable
ROM writes.


========================================================================
7/20/99 - FLASH Version 2.08
* DATA.CPP *
Added new SSIDs for the new Voodoo3 and Velocity series products

========================================================================
4/5/99 - FLASH Version 2.07
* PCIINFO.ASM *
Fixed errors in the type casting of variables in the routines 
_pciCreateConfigSpaceMapping and the PCIEnumerate.

* DATA.CPP *
Changed some of the "3Dfx" strings to say "3dfx".

========================================================================
4/1/99 - FLASH Version 2.06
* Makefle *
Added PCIINFO.CPP

* DATA.CPP *
Added Board descriptor info and bumped version to 2.06.

* MAIN.CPP *
Added support for multiple boards in system.

* USER.CPP *
Added ContinueYN function.

* FLASH.H *
Added support for multiple boards and board info.

* PCIINFO.CPP & VIDIN.H *
New files.

========================================================================
3/18/99 - FLASH Version 2.05
* ROM.CPP *
In WriteROMFromFile, added code to handle programming a 32K ROM which
is in a 64K Binary.

========================================================================
3/05/99 - FLASH Version 2.04
Fixed problem with not being able to create a SAVE.ROM image when the
SAVE.ROM ROM size was 40K.
Fixes PRS#4852

* MAIN.CPP *
The the main routine, modified the check for a 64K ROM to check for
anything above 32K, and will then assume a 64K ROM binary.

========================================================================
3/04/99 - FLASH Version 2.03
Added support for 40K BIOSs.  This must be used with all 40K BIOSs!

* ROM.CPP *
In WriteROMFromFile, added code to handle 40K ROMs in a 64K ROM file 
binary.

========================================================================
=== 2/25/99 - FLASH Version 2.02
Fixed bug with not being able to flash a 32K BIOS on a board strapped
for 32K.
PRS#4617

* ROM.CPP *
In WriteROMFromFile, added the ROM size strapping, MiscInit0[24], to 
determine if the board is strapped for 32K or 64K before deciding
if the PCI subvendor and subsystem ID needs to be shadowed to the
upper 64K of the ROM.

=== 2/24/99 - FLASH Version 2.01
FLASH now supports both Banshee and Avenger.
This fixes PRS#4394.

Fixed bug with 32K ROM subvendor and subsystem ID not being shadowed
onto the upper 64K.
This fixes PRS#4434.


* ROM.CPP *
Enabled code which shadows the PCI subsystem and subvendor ID to the upper 
64K of ROM when flashing a 32K BIOS.
Fixes PRS#4394


*	DATA.CPP *
Changed the strings szCopyright and szNoBoard to have no reference to 
Voodoo3.  This is so that the flash will work on both Banshee and Voodoo3.
Fixes PRS#4434.


* MAIN.CPP *
In InitBoard, removed the check for Voodoo3 2000 and added a check for
Banshee.

In Main, added a check for the ATMEL 29LV512 parts.

=== 2/10/99 - FLASH Version 2.00
This flash version will flash either a 32K or 64K binary image. It will also 
save off the previos BIOS according to its size. The Atmel 29LV512, 49BV512 
and SST27LE512 are now supported.

     * DATA.CPP *
     Changed version number.

     * FLASH.H *
     Added dwOldROMSaveSize and dwNewBinFileSize for ROM and Bin file sizes.

     * MAIN.CPP *
     Changed the file size checking to allow the variance between 64K and 32K.
     Added the ID's for the new EEPROMs

     * ROM.CPP *
     Changed the hard coded values of above.

